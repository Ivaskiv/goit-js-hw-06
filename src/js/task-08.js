//! Напиши скрипт управління формою логіна.
//! Обробка відправлення форми form.login-form повинна відбуватися відповідно до події submit.
//! Під час відправлення форми сторінка не повинна перезавантажуватися.
//! Якщо у формі є незаповнені поля, виводь alert з попередженням про те, що всі поля повинні бути заповнені.
//! Якщо користувач заповнив усі поля і відправив форму, збери значення полів в об'єкт, де ім'я поля буде ім'ям властивості, а значення поля - значенням властивості. Для доступу до елементів форми використовуй властивість elements.
//! Виведи об'єкт із введеними даними в консоль і очисти значення полів форми методом reset.

// <form class="login-form">
//   <label>
//     Email
//     <input type="email" name="email" />
//   </label>
//   <label>
//     Password
//     <input type="password" name="password" />
//   </label>
//   <button type="submit">Login</button>
// </form>

const form = document.querySelector('.login-form');

  form.addEventListener('submit', function (event) {
   //заборонити стандартну відправку форми
   event.preventDefault();
   //перевірити чи всі поля заповнені
   for (let i = 0; i < form.elements.length - 1; i += 1) {
    if (!form.elements[i].value) {
     alert('Всі поля повинні бути заповнені');
     return;
    }
   }
   //створити обєкт для збереження даних
   const formData = {};
   //за допомогою form.elements, перевірити, якщо елемент має атрибут name, то додати пару ключ-значення до створеного об'єкта
   for (let i = 0; i < form.elements.length - 1; i += 1) {
    if (form.elements[i].name) {
     formData[form.elements[i].name] = form.elements[i].value;
    }
   }
   console.log(formData);
   form.reset();
  });


//! ПОКРОКОВИЙ ПЛАН
// 1. Отримати посилання на елемент форми з класом login-form
// 2. Додати слухача події submit до форми, який буде викликаний при натисканні кнопки "Login" та відправці форми
// 3. У функції обробки події submit перевірити чи всі поля заповнені,якщо хоча б одне поле не заповнене (значення поля пусте), вивести  alert
// 4. Якщо всі поля заповнені, створити порожній об'єкт
// 5. Використовуючи цикл, перейти по всіх елементах форми (полях вводу) за допомогою form.elements, перевірити, якщо елемент має атрибут name, то додати пару ключ-значення до створеного об'єкта
// 6. Після збору всіх даних в об'єкті, вивести цей об'єкт в консоль 
// 7. Очистити значення полів форми за допомогою методу reset() 

//! ТЕОРІЯ

// querySelector - це метод JavaScript, який використовується для пошуку і вибору першого елемента в HTML-документі, який відповідає вказаному CSS селектору. Цей метод приймає рядок, який представляє собою CSS селектор, і повертає перший елемент, що збігається з цим селектором. Якщо жоден елемент не відповідає селектору, то метод поверне null.

// const element = document.querySelector('div'); // Вибір першого <div> елемента
// const elementWithClass = document.querySelector('.my-class'); // Вибір першого елемента з класом "my-class"
// const elementWithId = document.querySelector('#my-id'); // Вибір першого елемента з ідентифікатором "my-id"

// const nestedElement = document.querySelector('ul li'); // Вибір першого <li> елемента в <ul>

// const complexElement = document.querySelector('div.my-class > p'); // Вибір першого <p> елемента, який є нащадком <div> елемента з класом "my-class"
